 
Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

 

Example 1:

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
Example 2:

Input: n = 2  :: 2 ,4,16,37,58,89,145,42,20,4  // the pattern starts repeating thus our termination condition
Output: false
 

Constraints:

1 <= n <= 231 - 1



```
class Solution {
public:
    int solve(int n){
        int m=0;
        while(n>0){
            int c=n%10;
            m=m+c*c;
            n=n/10;
        }
        return m;
    }
    bool isHappy(int n) {
       unordered_set<int> hash;
       while(n!=1 && !hash.count(n)){
            hash.insert(n);
            n=solve(n);
       } 
       if(n==1)return true;
       return false; 
    }
};

```
